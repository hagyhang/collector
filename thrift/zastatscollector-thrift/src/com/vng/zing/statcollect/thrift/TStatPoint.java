/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vng.zing.statcollect.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TStatPoint implements org.apache.thrift.TBase<TStatPoint, TStatPoint._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TStatPoint");

  private static final org.apache.thrift.protocol.TField TOTAL_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("totalReq", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PENDING_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("pendingReq", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_TIME_PROC_FIELD_DESC = new org.apache.thrift.protocol.TField("totalTimeProc", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_TIME_PROC_FIELD_DESC = new org.apache.thrift.protocol.TField("lastTimeProc", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TStatPointStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TStatPointTupleSchemeFactory());
  }

  public long totalReq; // required
  public int pendingReq; // required
  public long totalTimeProc; // required
  public int lastTimeProc; // required
  public long timestamp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL_REQ((short)1, "totalReq"),
    PENDING_REQ((short)2, "pendingReq"),
    TOTAL_TIME_PROC((short)3, "totalTimeProc"),
    LAST_TIME_PROC((short)4, "lastTimeProc"),
    TIMESTAMP((short)5, "timestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_REQ
          return TOTAL_REQ;
        case 2: // PENDING_REQ
          return PENDING_REQ;
        case 3: // TOTAL_TIME_PROC
          return TOTAL_TIME_PROC;
        case 4: // LAST_TIME_PROC
          return LAST_TIME_PROC;
        case 5: // TIMESTAMP
          return TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALREQ_ISSET_ID = 0;
  private static final int __PENDINGREQ_ISSET_ID = 1;
  private static final int __TOTALTIMEPROC_ISSET_ID = 2;
  private static final int __LASTTIMEPROC_ISSET_ID = 3;
  private static final int __TIMESTAMP_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_REQ, new org.apache.thrift.meta_data.FieldMetaData("totalReq", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PENDING_REQ, new org.apache.thrift.meta_data.FieldMetaData("pendingReq", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_TIME_PROC, new org.apache.thrift.meta_data.FieldMetaData("totalTimeProc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_TIME_PROC, new org.apache.thrift.meta_data.FieldMetaData("lastTimeProc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TStatPoint.class, metaDataMap);
  }

  public TStatPoint() {
  }

  public TStatPoint(
    long totalReq,
    int pendingReq,
    long totalTimeProc,
    int lastTimeProc,
    long timestamp)
  {
    this();
    this.totalReq = totalReq;
    setTotalReqIsSet(true);
    this.pendingReq = pendingReq;
    setPendingReqIsSet(true);
    this.totalTimeProc = totalTimeProc;
    setTotalTimeProcIsSet(true);
    this.lastTimeProc = lastTimeProc;
    setLastTimeProcIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TStatPoint(TStatPoint other) {
    __isset_bitfield = other.__isset_bitfield;
    this.totalReq = other.totalReq;
    this.pendingReq = other.pendingReq;
    this.totalTimeProc = other.totalTimeProc;
    this.lastTimeProc = other.lastTimeProc;
    this.timestamp = other.timestamp;
  }

  public TStatPoint deepCopy() {
    return new TStatPoint(this);
  }

  @Override
  public void clear() {
    setTotalReqIsSet(false);
    this.totalReq = 0;
    setPendingReqIsSet(false);
    this.pendingReq = 0;
    setTotalTimeProcIsSet(false);
    this.totalTimeProc = 0;
    setLastTimeProcIsSet(false);
    this.lastTimeProc = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
  }

  public long getTotalReq() {
    return this.totalReq;
  }

  public TStatPoint setTotalReq(long totalReq) {
    this.totalReq = totalReq;
    setTotalReqIsSet(true);
    return this;
  }

  public void unsetTotalReq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALREQ_ISSET_ID);
  }

  /** Returns true if field totalReq is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalReq() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALREQ_ISSET_ID);
  }

  public void setTotalReqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALREQ_ISSET_ID, value);
  }

  public int getPendingReq() {
    return this.pendingReq;
  }

  public TStatPoint setPendingReq(int pendingReq) {
    this.pendingReq = pendingReq;
    setPendingReqIsSet(true);
    return this;
  }

  public void unsetPendingReq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PENDINGREQ_ISSET_ID);
  }

  /** Returns true if field pendingReq is set (has been assigned a value) and false otherwise */
  public boolean isSetPendingReq() {
    return EncodingUtils.testBit(__isset_bitfield, __PENDINGREQ_ISSET_ID);
  }

  public void setPendingReqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PENDINGREQ_ISSET_ID, value);
  }

  public long getTotalTimeProc() {
    return this.totalTimeProc;
  }

  public TStatPoint setTotalTimeProc(long totalTimeProc) {
    this.totalTimeProc = totalTimeProc;
    setTotalTimeProcIsSet(true);
    return this;
  }

  public void unsetTotalTimeProc() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALTIMEPROC_ISSET_ID);
  }

  /** Returns true if field totalTimeProc is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalTimeProc() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALTIMEPROC_ISSET_ID);
  }

  public void setTotalTimeProcIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALTIMEPROC_ISSET_ID, value);
  }

  public int getLastTimeProc() {
    return this.lastTimeProc;
  }

  public TStatPoint setLastTimeProc(int lastTimeProc) {
    this.lastTimeProc = lastTimeProc;
    setLastTimeProcIsSet(true);
    return this;
  }

  public void unsetLastTimeProc() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTTIMEPROC_ISSET_ID);
  }

  /** Returns true if field lastTimeProc is set (has been assigned a value) and false otherwise */
  public boolean isSetLastTimeProc() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTTIMEPROC_ISSET_ID);
  }

  public void setLastTimeProcIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTTIMEPROC_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public TStatPoint setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL_REQ:
      if (value == null) {
        unsetTotalReq();
      } else {
        setTotalReq((Long)value);
      }
      break;

    case PENDING_REQ:
      if (value == null) {
        unsetPendingReq();
      } else {
        setPendingReq((Integer)value);
      }
      break;

    case TOTAL_TIME_PROC:
      if (value == null) {
        unsetTotalTimeProc();
      } else {
        setTotalTimeProc((Long)value);
      }
      break;

    case LAST_TIME_PROC:
      if (value == null) {
        unsetLastTimeProc();
      } else {
        setLastTimeProc((Integer)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_REQ:
      return Long.valueOf(getTotalReq());

    case PENDING_REQ:
      return Integer.valueOf(getPendingReq());

    case TOTAL_TIME_PROC:
      return Long.valueOf(getTotalTimeProc());

    case LAST_TIME_PROC:
      return Integer.valueOf(getLastTimeProc());

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_REQ:
      return isSetTotalReq();
    case PENDING_REQ:
      return isSetPendingReq();
    case TOTAL_TIME_PROC:
      return isSetTotalTimeProc();
    case LAST_TIME_PROC:
      return isSetLastTimeProc();
    case TIMESTAMP:
      return isSetTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TStatPoint)
      return this.equals((TStatPoint)that);
    return false;
  }

  public boolean equals(TStatPoint that) {
    if (that == null)
      return false;

    boolean this_present_totalReq = true;
    boolean that_present_totalReq = true;
    if (this_present_totalReq || that_present_totalReq) {
      if (!(this_present_totalReq && that_present_totalReq))
        return false;
      if (this.totalReq != that.totalReq)
        return false;
    }

    boolean this_present_pendingReq = true;
    boolean that_present_pendingReq = true;
    if (this_present_pendingReq || that_present_pendingReq) {
      if (!(this_present_pendingReq && that_present_pendingReq))
        return false;
      if (this.pendingReq != that.pendingReq)
        return false;
    }

    boolean this_present_totalTimeProc = true;
    boolean that_present_totalTimeProc = true;
    if (this_present_totalTimeProc || that_present_totalTimeProc) {
      if (!(this_present_totalTimeProc && that_present_totalTimeProc))
        return false;
      if (this.totalTimeProc != that.totalTimeProc)
        return false;
    }

    boolean this_present_lastTimeProc = true;
    boolean that_present_lastTimeProc = true;
    if (this_present_lastTimeProc || that_present_lastTimeProc) {
      if (!(this_present_lastTimeProc && that_present_lastTimeProc))
        return false;
      if (this.lastTimeProc != that.lastTimeProc)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TStatPoint other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TStatPoint typedOther = (TStatPoint)other;

    lastComparison = Boolean.valueOf(isSetTotalReq()).compareTo(typedOther.isSetTotalReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalReq, typedOther.totalReq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPendingReq()).compareTo(typedOther.isSetPendingReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPendingReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pendingReq, typedOther.pendingReq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalTimeProc()).compareTo(typedOther.isSetTotalTimeProc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalTimeProc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalTimeProc, typedOther.totalTimeProc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastTimeProc()).compareTo(typedOther.isSetLastTimeProc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastTimeProc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastTimeProc, typedOther.lastTimeProc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TStatPoint(");
    boolean first = true;

    sb.append("totalReq:");
    sb.append(this.totalReq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pendingReq:");
    sb.append(this.pendingReq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalTimeProc:");
    sb.append(this.totalTimeProc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastTimeProc:");
    sb.append(this.lastTimeProc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'totalReq' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'pendingReq' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalTimeProc' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'lastTimeProc' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TStatPointStandardSchemeFactory implements SchemeFactory {
    public TStatPointStandardScheme getScheme() {
      return new TStatPointStandardScheme();
    }
  }

  private static class TStatPointStandardScheme extends StandardScheme<TStatPoint> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TStatPoint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalReq = iprot.readI64();
              struct.setTotalReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PENDING_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pendingReq = iprot.readI32();
              struct.setPendingReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_TIME_PROC
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalTimeProc = iprot.readI64();
              struct.setTotalTimeProcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_TIME_PROC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastTimeProc = iprot.readI32();
              struct.setLastTimeProcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTotalReq()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalReq' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPendingReq()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pendingReq' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalTimeProc()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalTimeProc' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLastTimeProc()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastTimeProc' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTimestamp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TStatPoint struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOTAL_REQ_FIELD_DESC);
      oprot.writeI64(struct.totalReq);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PENDING_REQ_FIELD_DESC);
      oprot.writeI32(struct.pendingReq);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_TIME_PROC_FIELD_DESC);
      oprot.writeI64(struct.totalTimeProc);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_TIME_PROC_FIELD_DESC);
      oprot.writeI32(struct.lastTimeProc);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TStatPointTupleSchemeFactory implements SchemeFactory {
    public TStatPointTupleScheme getScheme() {
      return new TStatPointTupleScheme();
    }
  }

  private static class TStatPointTupleScheme extends TupleScheme<TStatPoint> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TStatPoint struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.totalReq);
      oprot.writeI32(struct.pendingReq);
      oprot.writeI64(struct.totalTimeProc);
      oprot.writeI32(struct.lastTimeProc);
      oprot.writeI64(struct.timestamp);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TStatPoint struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.totalReq = iprot.readI64();
      struct.setTotalReqIsSet(true);
      struct.pendingReq = iprot.readI32();
      struct.setPendingReqIsSet(true);
      struct.totalTimeProc = iprot.readI64();
      struct.setTotalTimeProcIsSet(true);
      struct.lastTimeProc = iprot.readI32();
      struct.setLastTimeProcIsSet(true);
      struct.timestamp = iprot.readI64();
      struct.setTimestampIsSet(true);
    }
  }

}

