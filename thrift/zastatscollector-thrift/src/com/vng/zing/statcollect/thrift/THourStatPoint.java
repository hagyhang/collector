/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vng.zing.statcollect.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class THourStatPoint implements org.apache.thrift.TBase<THourStatPoint, THourStatPoint._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THourStatPoint");

  private static final org.apache.thrift.protocol.TField TOTAL_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("totalReq", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_TIME_PROC_FIELD_DESC = new org.apache.thrift.protocol.TField("totalTimeProc", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("timeEnd", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PEAK_TIME_PROC_FIELD_DESC = new org.apache.thrift.protocol.TField("peakTimeProc", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField PEAK_PENDING_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("peakPendingReq", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField PEAK_REQ_RATE_SECON_FIELD_DESC = new org.apache.thrift.protocol.TField("peakReqRateSecon", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField PEAK_REQ_RATE_MINUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("peakReqRateMinute", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new THourStatPointStandardSchemeFactory());
    schemes.put(TupleScheme.class, new THourStatPointTupleSchemeFactory());
  }

  public int totalReq; // required
  public long totalTimeProc; // required
  public long timeEnd; // required
  public TPeakInfo peakTimeProc; // required
  public TPeakInfo peakPendingReq; // required
  public TPeakInfo peakReqRateSecon; // required
  public TPeakInfo peakReqRateMinute; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL_REQ((short)1, "totalReq"),
    TOTAL_TIME_PROC((short)2, "totalTimeProc"),
    TIME_END((short)3, "timeEnd"),
    PEAK_TIME_PROC((short)4, "peakTimeProc"),
    PEAK_PENDING_REQ((short)5, "peakPendingReq"),
    PEAK_REQ_RATE_SECON((short)6, "peakReqRateSecon"),
    PEAK_REQ_RATE_MINUTE((short)7, "peakReqRateMinute");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_REQ
          return TOTAL_REQ;
        case 2: // TOTAL_TIME_PROC
          return TOTAL_TIME_PROC;
        case 3: // TIME_END
          return TIME_END;
        case 4: // PEAK_TIME_PROC
          return PEAK_TIME_PROC;
        case 5: // PEAK_PENDING_REQ
          return PEAK_PENDING_REQ;
        case 6: // PEAK_REQ_RATE_SECON
          return PEAK_REQ_RATE_SECON;
        case 7: // PEAK_REQ_RATE_MINUTE
          return PEAK_REQ_RATE_MINUTE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALREQ_ISSET_ID = 0;
  private static final int __TOTALTIMEPROC_ISSET_ID = 1;
  private static final int __TIMEEND_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_REQ, new org.apache.thrift.meta_data.FieldMetaData("totalReq", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_TIME_PROC, new org.apache.thrift.meta_data.FieldMetaData("totalTimeProc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIME_END, new org.apache.thrift.meta_data.FieldMetaData("timeEnd", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PEAK_TIME_PROC, new org.apache.thrift.meta_data.FieldMetaData("peakTimeProc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPeakInfo.class)));
    tmpMap.put(_Fields.PEAK_PENDING_REQ, new org.apache.thrift.meta_data.FieldMetaData("peakPendingReq", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPeakInfo.class)));
    tmpMap.put(_Fields.PEAK_REQ_RATE_SECON, new org.apache.thrift.meta_data.FieldMetaData("peakReqRateSecon", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPeakInfo.class)));
    tmpMap.put(_Fields.PEAK_REQ_RATE_MINUTE, new org.apache.thrift.meta_data.FieldMetaData("peakReqRateMinute", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPeakInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THourStatPoint.class, metaDataMap);
  }

  public THourStatPoint() {
  }

  public THourStatPoint(
    int totalReq,
    long totalTimeProc,
    long timeEnd,
    TPeakInfo peakTimeProc,
    TPeakInfo peakPendingReq,
    TPeakInfo peakReqRateSecon,
    TPeakInfo peakReqRateMinute)
  {
    this();
    this.totalReq = totalReq;
    setTotalReqIsSet(true);
    this.totalTimeProc = totalTimeProc;
    setTotalTimeProcIsSet(true);
    this.timeEnd = timeEnd;
    setTimeEndIsSet(true);
    this.peakTimeProc = peakTimeProc;
    this.peakPendingReq = peakPendingReq;
    this.peakReqRateSecon = peakReqRateSecon;
    this.peakReqRateMinute = peakReqRateMinute;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THourStatPoint(THourStatPoint other) {
    __isset_bitfield = other.__isset_bitfield;
    this.totalReq = other.totalReq;
    this.totalTimeProc = other.totalTimeProc;
    this.timeEnd = other.timeEnd;
    if (other.isSetPeakTimeProc()) {
      this.peakTimeProc = new TPeakInfo(other.peakTimeProc);
    }
    if (other.isSetPeakPendingReq()) {
      this.peakPendingReq = new TPeakInfo(other.peakPendingReq);
    }
    if (other.isSetPeakReqRateSecon()) {
      this.peakReqRateSecon = new TPeakInfo(other.peakReqRateSecon);
    }
    if (other.isSetPeakReqRateMinute()) {
      this.peakReqRateMinute = new TPeakInfo(other.peakReqRateMinute);
    }
  }

  public THourStatPoint deepCopy() {
    return new THourStatPoint(this);
  }

  @Override
  public void clear() {
    setTotalReqIsSet(false);
    this.totalReq = 0;
    setTotalTimeProcIsSet(false);
    this.totalTimeProc = 0;
    setTimeEndIsSet(false);
    this.timeEnd = 0;
    this.peakTimeProc = null;
    this.peakPendingReq = null;
    this.peakReqRateSecon = null;
    this.peakReqRateMinute = null;
  }

  public int getTotalReq() {
    return this.totalReq;
  }

  public THourStatPoint setTotalReq(int totalReq) {
    this.totalReq = totalReq;
    setTotalReqIsSet(true);
    return this;
  }

  public void unsetTotalReq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALREQ_ISSET_ID);
  }

  /** Returns true if field totalReq is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalReq() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALREQ_ISSET_ID);
  }

  public void setTotalReqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALREQ_ISSET_ID, value);
  }

  public long getTotalTimeProc() {
    return this.totalTimeProc;
  }

  public THourStatPoint setTotalTimeProc(long totalTimeProc) {
    this.totalTimeProc = totalTimeProc;
    setTotalTimeProcIsSet(true);
    return this;
  }

  public void unsetTotalTimeProc() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALTIMEPROC_ISSET_ID);
  }

  /** Returns true if field totalTimeProc is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalTimeProc() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALTIMEPROC_ISSET_ID);
  }

  public void setTotalTimeProcIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALTIMEPROC_ISSET_ID, value);
  }

  public long getTimeEnd() {
    return this.timeEnd;
  }

  public THourStatPoint setTimeEnd(long timeEnd) {
    this.timeEnd = timeEnd;
    setTimeEndIsSet(true);
    return this;
  }

  public void unsetTimeEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEEND_ISSET_ID);
  }

  /** Returns true if field timeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEEND_ISSET_ID);
  }

  public void setTimeEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEEND_ISSET_ID, value);
  }

  public TPeakInfo getPeakTimeProc() {
    return this.peakTimeProc;
  }

  public THourStatPoint setPeakTimeProc(TPeakInfo peakTimeProc) {
    this.peakTimeProc = peakTimeProc;
    return this;
  }

  public void unsetPeakTimeProc() {
    this.peakTimeProc = null;
  }

  /** Returns true if field peakTimeProc is set (has been assigned a value) and false otherwise */
  public boolean isSetPeakTimeProc() {
    return this.peakTimeProc != null;
  }

  public void setPeakTimeProcIsSet(boolean value) {
    if (!value) {
      this.peakTimeProc = null;
    }
  }

  public TPeakInfo getPeakPendingReq() {
    return this.peakPendingReq;
  }

  public THourStatPoint setPeakPendingReq(TPeakInfo peakPendingReq) {
    this.peakPendingReq = peakPendingReq;
    return this;
  }

  public void unsetPeakPendingReq() {
    this.peakPendingReq = null;
  }

  /** Returns true if field peakPendingReq is set (has been assigned a value) and false otherwise */
  public boolean isSetPeakPendingReq() {
    return this.peakPendingReq != null;
  }

  public void setPeakPendingReqIsSet(boolean value) {
    if (!value) {
      this.peakPendingReq = null;
    }
  }

  public TPeakInfo getPeakReqRateSecon() {
    return this.peakReqRateSecon;
  }

  public THourStatPoint setPeakReqRateSecon(TPeakInfo peakReqRateSecon) {
    this.peakReqRateSecon = peakReqRateSecon;
    return this;
  }

  public void unsetPeakReqRateSecon() {
    this.peakReqRateSecon = null;
  }

  /** Returns true if field peakReqRateSecon is set (has been assigned a value) and false otherwise */
  public boolean isSetPeakReqRateSecon() {
    return this.peakReqRateSecon != null;
  }

  public void setPeakReqRateSeconIsSet(boolean value) {
    if (!value) {
      this.peakReqRateSecon = null;
    }
  }

  public TPeakInfo getPeakReqRateMinute() {
    return this.peakReqRateMinute;
  }

  public THourStatPoint setPeakReqRateMinute(TPeakInfo peakReqRateMinute) {
    this.peakReqRateMinute = peakReqRateMinute;
    return this;
  }

  public void unsetPeakReqRateMinute() {
    this.peakReqRateMinute = null;
  }

  /** Returns true if field peakReqRateMinute is set (has been assigned a value) and false otherwise */
  public boolean isSetPeakReqRateMinute() {
    return this.peakReqRateMinute != null;
  }

  public void setPeakReqRateMinuteIsSet(boolean value) {
    if (!value) {
      this.peakReqRateMinute = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL_REQ:
      if (value == null) {
        unsetTotalReq();
      } else {
        setTotalReq((Integer)value);
      }
      break;

    case TOTAL_TIME_PROC:
      if (value == null) {
        unsetTotalTimeProc();
      } else {
        setTotalTimeProc((Long)value);
      }
      break;

    case TIME_END:
      if (value == null) {
        unsetTimeEnd();
      } else {
        setTimeEnd((Long)value);
      }
      break;

    case PEAK_TIME_PROC:
      if (value == null) {
        unsetPeakTimeProc();
      } else {
        setPeakTimeProc((TPeakInfo)value);
      }
      break;

    case PEAK_PENDING_REQ:
      if (value == null) {
        unsetPeakPendingReq();
      } else {
        setPeakPendingReq((TPeakInfo)value);
      }
      break;

    case PEAK_REQ_RATE_SECON:
      if (value == null) {
        unsetPeakReqRateSecon();
      } else {
        setPeakReqRateSecon((TPeakInfo)value);
      }
      break;

    case PEAK_REQ_RATE_MINUTE:
      if (value == null) {
        unsetPeakReqRateMinute();
      } else {
        setPeakReqRateMinute((TPeakInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_REQ:
      return Integer.valueOf(getTotalReq());

    case TOTAL_TIME_PROC:
      return Long.valueOf(getTotalTimeProc());

    case TIME_END:
      return Long.valueOf(getTimeEnd());

    case PEAK_TIME_PROC:
      return getPeakTimeProc();

    case PEAK_PENDING_REQ:
      return getPeakPendingReq();

    case PEAK_REQ_RATE_SECON:
      return getPeakReqRateSecon();

    case PEAK_REQ_RATE_MINUTE:
      return getPeakReqRateMinute();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_REQ:
      return isSetTotalReq();
    case TOTAL_TIME_PROC:
      return isSetTotalTimeProc();
    case TIME_END:
      return isSetTimeEnd();
    case PEAK_TIME_PROC:
      return isSetPeakTimeProc();
    case PEAK_PENDING_REQ:
      return isSetPeakPendingReq();
    case PEAK_REQ_RATE_SECON:
      return isSetPeakReqRateSecon();
    case PEAK_REQ_RATE_MINUTE:
      return isSetPeakReqRateMinute();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THourStatPoint)
      return this.equals((THourStatPoint)that);
    return false;
  }

  public boolean equals(THourStatPoint that) {
    if (that == null)
      return false;

    boolean this_present_totalReq = true;
    boolean that_present_totalReq = true;
    if (this_present_totalReq || that_present_totalReq) {
      if (!(this_present_totalReq && that_present_totalReq))
        return false;
      if (this.totalReq != that.totalReq)
        return false;
    }

    boolean this_present_totalTimeProc = true;
    boolean that_present_totalTimeProc = true;
    if (this_present_totalTimeProc || that_present_totalTimeProc) {
      if (!(this_present_totalTimeProc && that_present_totalTimeProc))
        return false;
      if (this.totalTimeProc != that.totalTimeProc)
        return false;
    }

    boolean this_present_timeEnd = true;
    boolean that_present_timeEnd = true;
    if (this_present_timeEnd || that_present_timeEnd) {
      if (!(this_present_timeEnd && that_present_timeEnd))
        return false;
      if (this.timeEnd != that.timeEnd)
        return false;
    }

    boolean this_present_peakTimeProc = true && this.isSetPeakTimeProc();
    boolean that_present_peakTimeProc = true && that.isSetPeakTimeProc();
    if (this_present_peakTimeProc || that_present_peakTimeProc) {
      if (!(this_present_peakTimeProc && that_present_peakTimeProc))
        return false;
      if (!this.peakTimeProc.equals(that.peakTimeProc))
        return false;
    }

    boolean this_present_peakPendingReq = true && this.isSetPeakPendingReq();
    boolean that_present_peakPendingReq = true && that.isSetPeakPendingReq();
    if (this_present_peakPendingReq || that_present_peakPendingReq) {
      if (!(this_present_peakPendingReq && that_present_peakPendingReq))
        return false;
      if (!this.peakPendingReq.equals(that.peakPendingReq))
        return false;
    }

    boolean this_present_peakReqRateSecon = true && this.isSetPeakReqRateSecon();
    boolean that_present_peakReqRateSecon = true && that.isSetPeakReqRateSecon();
    if (this_present_peakReqRateSecon || that_present_peakReqRateSecon) {
      if (!(this_present_peakReqRateSecon && that_present_peakReqRateSecon))
        return false;
      if (!this.peakReqRateSecon.equals(that.peakReqRateSecon))
        return false;
    }

    boolean this_present_peakReqRateMinute = true && this.isSetPeakReqRateMinute();
    boolean that_present_peakReqRateMinute = true && that.isSetPeakReqRateMinute();
    if (this_present_peakReqRateMinute || that_present_peakReqRateMinute) {
      if (!(this_present_peakReqRateMinute && that_present_peakReqRateMinute))
        return false;
      if (!this.peakReqRateMinute.equals(that.peakReqRateMinute))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(THourStatPoint other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    THourStatPoint typedOther = (THourStatPoint)other;

    lastComparison = Boolean.valueOf(isSetTotalReq()).compareTo(typedOther.isSetTotalReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalReq, typedOther.totalReq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalTimeProc()).compareTo(typedOther.isSetTotalTimeProc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalTimeProc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalTimeProc, typedOther.totalTimeProc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeEnd()).compareTo(typedOther.isSetTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeEnd, typedOther.timeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPeakTimeProc()).compareTo(typedOther.isSetPeakTimeProc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeakTimeProc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peakTimeProc, typedOther.peakTimeProc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPeakPendingReq()).compareTo(typedOther.isSetPeakPendingReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeakPendingReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peakPendingReq, typedOther.peakPendingReq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPeakReqRateSecon()).compareTo(typedOther.isSetPeakReqRateSecon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeakReqRateSecon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peakReqRateSecon, typedOther.peakReqRateSecon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPeakReqRateMinute()).compareTo(typedOther.isSetPeakReqRateMinute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeakReqRateMinute()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peakReqRateMinute, typedOther.peakReqRateMinute);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THourStatPoint(");
    boolean first = true;

    sb.append("totalReq:");
    sb.append(this.totalReq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalTimeProc:");
    sb.append(this.totalTimeProc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeEnd:");
    sb.append(this.timeEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("peakTimeProc:");
    if (this.peakTimeProc == null) {
      sb.append("null");
    } else {
      sb.append(this.peakTimeProc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("peakPendingReq:");
    if (this.peakPendingReq == null) {
      sb.append("null");
    } else {
      sb.append(this.peakPendingReq);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("peakReqRateSecon:");
    if (this.peakReqRateSecon == null) {
      sb.append("null");
    } else {
      sb.append(this.peakReqRateSecon);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("peakReqRateMinute:");
    if (this.peakReqRateMinute == null) {
      sb.append("null");
    } else {
      sb.append(this.peakReqRateMinute);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'totalReq' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalTimeProc' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'timeEnd' because it's a primitive and you chose the non-beans generator.
    if (peakTimeProc == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'peakTimeProc' was not present! Struct: " + toString());
    }
    if (peakPendingReq == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'peakPendingReq' was not present! Struct: " + toString());
    }
    if (peakReqRateSecon == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'peakReqRateSecon' was not present! Struct: " + toString());
    }
    if (peakReqRateMinute == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'peakReqRateMinute' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (peakTimeProc != null) {
      peakTimeProc.validate();
    }
    if (peakPendingReq != null) {
      peakPendingReq.validate();
    }
    if (peakReqRateSecon != null) {
      peakReqRateSecon.validate();
    }
    if (peakReqRateMinute != null) {
      peakReqRateMinute.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THourStatPointStandardSchemeFactory implements SchemeFactory {
    public THourStatPointStandardScheme getScheme() {
      return new THourStatPointStandardScheme();
    }
  }

  private static class THourStatPointStandardScheme extends StandardScheme<THourStatPoint> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THourStatPoint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalReq = iprot.readI32();
              struct.setTotalReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_TIME_PROC
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalTimeProc = iprot.readI64();
              struct.setTotalTimeProcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeEnd = iprot.readI64();
              struct.setTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PEAK_TIME_PROC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.peakTimeProc = new TPeakInfo();
              struct.peakTimeProc.read(iprot);
              struct.setPeakTimeProcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PEAK_PENDING_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.peakPendingReq = new TPeakInfo();
              struct.peakPendingReq.read(iprot);
              struct.setPeakPendingReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PEAK_REQ_RATE_SECON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.peakReqRateSecon = new TPeakInfo();
              struct.peakReqRateSecon.read(iprot);
              struct.setPeakReqRateSeconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PEAK_REQ_RATE_MINUTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.peakReqRateMinute = new TPeakInfo();
              struct.peakReqRateMinute.read(iprot);
              struct.setPeakReqRateMinuteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTotalReq()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalReq' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalTimeProc()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalTimeProc' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTimeEnd()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeEnd' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THourStatPoint struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOTAL_REQ_FIELD_DESC);
      oprot.writeI32(struct.totalReq);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_TIME_PROC_FIELD_DESC);
      oprot.writeI64(struct.totalTimeProc);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIME_END_FIELD_DESC);
      oprot.writeI64(struct.timeEnd);
      oprot.writeFieldEnd();
      if (struct.peakTimeProc != null) {
        oprot.writeFieldBegin(PEAK_TIME_PROC_FIELD_DESC);
        struct.peakTimeProc.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.peakPendingReq != null) {
        oprot.writeFieldBegin(PEAK_PENDING_REQ_FIELD_DESC);
        struct.peakPendingReq.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.peakReqRateSecon != null) {
        oprot.writeFieldBegin(PEAK_REQ_RATE_SECON_FIELD_DESC);
        struct.peakReqRateSecon.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.peakReqRateMinute != null) {
        oprot.writeFieldBegin(PEAK_REQ_RATE_MINUTE_FIELD_DESC);
        struct.peakReqRateMinute.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THourStatPointTupleSchemeFactory implements SchemeFactory {
    public THourStatPointTupleScheme getScheme() {
      return new THourStatPointTupleScheme();
    }
  }

  private static class THourStatPointTupleScheme extends TupleScheme<THourStatPoint> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THourStatPoint struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.totalReq);
      oprot.writeI64(struct.totalTimeProc);
      oprot.writeI64(struct.timeEnd);
      struct.peakTimeProc.write(oprot);
      struct.peakPendingReq.write(oprot);
      struct.peakReqRateSecon.write(oprot);
      struct.peakReqRateMinute.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THourStatPoint struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.totalReq = iprot.readI32();
      struct.setTotalReqIsSet(true);
      struct.totalTimeProc = iprot.readI64();
      struct.setTotalTimeProcIsSet(true);
      struct.timeEnd = iprot.readI64();
      struct.setTimeEndIsSet(true);
      struct.peakTimeProc = new TPeakInfo();
      struct.peakTimeProc.read(iprot);
      struct.setPeakTimeProcIsSet(true);
      struct.peakPendingReq = new TPeakInfo();
      struct.peakPendingReq.read(iprot);
      struct.setPeakPendingReqIsSet(true);
      struct.peakReqRateSecon = new TPeakInfo();
      struct.peakReqRateSecon.read(iprot);
      struct.setPeakReqRateSeconIsSet(true);
      struct.peakReqRateMinute = new TPeakInfo();
      struct.peakReqRateMinute.read(iprot);
      struct.setPeakReqRateMinuteIsSet(true);
    }
  }

}

